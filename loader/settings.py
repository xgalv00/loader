"""
Django settings for loader project.

Generated by 'django-admin startproject' using Django 1.11.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'm4f6v@1-c_@=9b-7quc*k$j%pv8kiz0%sbgm2700rh$(9a^ok#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'scraper',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'loader.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'loader.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

LOGS_PATH = os.path.join(BASE_DIR, 'logs')
LOG_FILE_IMPORT = os.path.join(LOGS_PATH, 'import.log')
LOG_FILE_IMPORT_FAILURE = os.path.join(LOGS_PATH, 'import_failure.log')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        # 'standard': {
        #     'format': '%(asctime)s - %(name)s - %(levelname)s - %(funcname)s - %(message)s',
        # },
        # todo improve logging configuration
        'standard': {
            'format': '%(asctime)s - %(name)s - %(levelname)s - %(threadName)s - %(message)s',
        },
        'threaded': {
            'format': '%(asctime)s - %(name)s - %(levelname)s - %(threadName)s - %(funcName)s - %(message)s',
        }
    },
    'handlers': {
        'import': {
            'level': 'INFO',
            'filters': [],
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_FILE_IMPORT,
            'maxBytes': 1000000,
            'backupCount': 2,
            'formatter': 'standard'
        },
        'import_failure': {
            'level': 'ERROR',
            'filters': [],
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_FILE_IMPORT_FAILURE,
            'maxBytes': 100000,
            'backupCount': 2,
            'formatter': 'standard'
        }
    },
    'loggers': {
        'import': {
            'handlers': ['import', 'import_failure'],
            'level': 'INFO',
            'propagate': True,
        }
    }
}
